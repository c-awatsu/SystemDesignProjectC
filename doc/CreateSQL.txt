
create table account(
	account_id Serial Primary key,
	account_name text not null unique,
	passphrase  varchar(256) not null,
	role varchar(64) check(role = 'TEACHER' or role = 'STUDENT' or role = 'TA' or role = 'ADMIN')
);

create table lecture(
	lecture_id serial primary key,
	lecture_name text not null,
	grade integer not null check(grade > 4 ),
	department text,
	required boolean not null
);


create table lecture_detail(
	lecture_detail_id serial primary key,
	lecture_id integer REFERENCES lecture(lecture_id) on update cascade on delete cascade,
	times integer not null,
	title text not null
);

create table section(
	section_id serial primary key,
	lecture_detail_id integer REFERENCES lecture_detail(lecture_detail_id) on update cascade on delete cascade,
	section_title text not null
);

create table questionnaire(
	questionnaire_id Serial Primary key,
	lecture_id integer REFERENCES lecture(lecture_id)ON UPDATE CASCADE ON DELETE CASCADE,
	section_id integer REFERENCES section(section_id)ON UPDATE CASCADE ON DELETE CASCADE,
	yes numeric,
	no numeric
);


create table comment(
	comment_id serial primary key,
	lecture_datail_id integer references lecture_detail(lecture_detail_id) on update cascade on delete cascade,
	account_id integer references account(account_id) on update cascade on delete cascade,
	section_id integer references section(section_id) on update cascade on delete cascade,
	comment varchar(100) not null
);

create table lecture_owner(
	lecture_owner_id serial primary key,
	account_id integer REFERENCES account(account_id) on update cascade on delete cascade,
	lecture_id integer REFERENCES lecture(lecture_id) on update cascade on delete cascade
);

create table comment_analysis(
	comment_analysis_id serial primary key,
	lecture_detail_id integer REFERENCES lecture_detail(lecture_detail_id) on update cascade on delete cascade,
	section_id integer REFERENCES section(section_id) on update cascade on delete cascade,
	keyword text not null,
	count integer not null
);

alter table account drop constraint account_role_check;

create table business_template(
	business_template_id serial primary key,
	lecture_id integer REFERENCES lecture(lecture_id) on update cascade on delete cascade,
	business text
);

create table business_log(
	business_template_id integer primary key REFERENCES business_template(business_template_id) on update cascade on delete cascade,
	lecture_datail_id integer references lecture_detail(lecture_detail_id) on update cascade on delete cascade,
	count integer
);

create table other_log(
	other_log_id serial primary key,
	lecture_datail_id integer references lecture_detail(lecture_detail_id) on update cascade on delete cascade,
	value text
);

alter table account add check (role = 'TEACHER' or role = 'STUDENT' or role = 'TA' or role = 'ADMIN');
alter table lecture drop grade;
alter table lecture add grade text;
alter table lecture add check(grade = '1年' or grade ='2年' or grade ='3年' or grade = '4年');
alter table lecture alter column required type text;
alter table lecture add check(required = 'required' or required = 'selection')
alter table lecture add term text;
alter table lecture add check (term = '春学期' or term = '秋学期');
alter table lecture drop constraint lecture_required_check;
alter table lecture add check (required='必修' or required='選択');
alter table business_template add other text;
alter table questionnaire drop no;
alter table questionnaire add no integer;

create table call_log(
	call_log_id serial primary key,
	lecture_id integer REFERENCES lecture(lecture_id) on update cascade on delete cascade,
	business text,
	other text,
	col_position text,
	row_position text,
	time timestamp with time zone
);
	